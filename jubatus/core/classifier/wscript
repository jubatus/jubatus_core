# -*- python -*-
def options(ctx): pass

def configure(ctx): pass

def build(bld):
  source = [
      'linear_classifier.cpp',
      'perceptron.cpp',
      'passive_aggressive.cpp',
      'passive_aggressive_1.cpp',
      'passive_aggressive_2.cpp',
      'confidence_weighted.cpp',
      'arow.cpp',
      'normal_herd.cpp',
      'nearest_neighbor_classifier.cpp',
      'classifier_factory.cpp',
      'classifier_config.cpp',
      ]
  headers = [
      'classifier_base.hpp',
      'classifier_factory.hpp',
      'classifier_type.hpp',
      'classifier_config.hpp',
      'classifier.hpp',
      'linear_classifier.hpp',
      'arow.hpp',
      'confidence_weighted.hpp',
      'normal_herd.hpp',
      'passive_aggressive.hpp',
      'passive_aggressive_1.hpp',
      'passive_aggressive_2.hpp',
      'perceptron.hpp',
      'nearest_neighbor_classifier.hpp',
      ]
  use = ['jubatus_util']

  bld.core_sources.extend(bld.add_prefix(source))
  bld.core_headers.extend(bld.add_prefix(headers))
  bld.core_use.extend(use)

  bld.program(
     features = 'gtest',
     source = [
         'classifier_test.cpp',
     ],
     target = "classifier_test",
     includes = '.',
     use = ['jubatus_util', 'jubatus_core'])

  bld.program(
     features = 'gtest',
     source = [
         'classifier_factory_test.cpp',
     ],
     target = "classifier_factory_test",
     includes = '.',
     use = ['jubatus_util', 'jubatus_core'])

